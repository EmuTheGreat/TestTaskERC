// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestTask.dal;

#nullable disable

namespace TestTask.Migrations
{
    [DbContext(typeof(BillingContext))]
    [Migration("20250525213523_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("TestTask.dal.Models.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("ColdWaterCharge")
                        .HasColumnType("REAL");

                    b.Property<double>("ElectricityDayCharge")
                        .HasColumnType("REAL");

                    b.Property<double>("ElectricityNightCharge")
                        .HasColumnType("REAL");

                    b.Property<double>("HotWaterCharge")
                        .HasColumnType("REAL");

                    b.Property<double>("HotWaterHeatCharge")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Month")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("TestTask.dal.Models.MonthlyReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Current")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Month")
                        .HasColumnType("TEXT");

                    b.Property<double>("Previous")
                        .HasColumnType("REAL");

                    b.Property<int>("Service")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MonthlyReadings");
                });

            modelBuilder.Entity("TestTask.dal.Models.ResidentCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("From")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Month")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("To")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ResidentCounts");
                });

            modelBuilder.Entity("TestTask.dal.Models.ServiceNorm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("TEXT");

                    b.Property<int>("Service")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("Service", "EffectiveFrom");

                    b.ToTable("Norms");
                });

            modelBuilder.Entity("TestTask.dal.Models.ServiceTariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("TEXT");

                    b.Property<int>("Service")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("Service", "EffectiveFrom");

                    b.ToTable("Tariffs");
                });
#pragma warning restore 612, 618
        }
    }
}
